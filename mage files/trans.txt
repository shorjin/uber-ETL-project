import pandas as pd
if 'transformer' not in globals():
    from mage_ai.data_preparation.decorators import transformer
if 'test' not in globals():
    from mage_ai.data_preparation.decorators import test


@transformer
def transform(data, *args, **kwargs):
    """
    Template code for a transformer block.

    Add more parameters to this function if this block has multiple parent blocks.
    There should be one parameter for each output variable from each parent block.

    Args:
        data: The output from the upstream parent block
        args: The output from any additional upstream blocks (if applicable)

    Returns:
        Anything (e.g. data frame, dictionary, array, int, str, etc.)
    """
    # Specify your transformation logic here
    data["tpep_pickup_datetime"] = pd.to_datetime(data['tpep_pickup_datetime'])
    data["tpep_dropoff_datetime"] = pd.to_datetime(data['tpep_dropoff_datetime'])
    data = data.drop_duplicates().reset_index(drop=True)
    datetime_dim = data.copy()
    datetime_dim = datetime_dim[["tpep_dropoff_datetime","tpep_pickup_datetime"]]
    #DELETE DUP
    datetime_dim = datetime_dim.drop_duplicates().reset_index(drop=True)
    datetime_dim['tpep_pickup_datetime'] = datetime_dim['tpep_pickup_datetime']
    datetime_dim['pick_hour'] = datetime_dim['tpep_pickup_datetime'].dt.hour
    datetime_dim['pick_day'] = datetime_dim['tpep_pickup_datetime'].dt.day
    datetime_dim['pick_month'] = datetime_dim['tpep_pickup_datetime'].dt.month
    datetime_dim['pick_year'] = datetime_dim['tpep_pickup_datetime'].dt.year
    datetime_dim['pick_weekday'] = datetime_dim['tpep_pickup_datetime'].dt.weekday

    datetime_dim['tpep_dropoff_datetime'] = datetime_dim['tpep_dropoff_datetime']
    datetime_dim['drop_hour'] = datetime_dim['tpep_dropoff_datetime'].dt.hour
    datetime_dim['drop_day'] = datetime_dim['tpep_dropoff_datetime'].dt.day
    datetime_dim['drop_month'] = datetime_dim['tpep_dropoff_datetime'].dt.month
    datetime_dim['drop_year'] = datetime_dim['tpep_dropoff_datetime'].dt.year
    datetime_dim['drop_weekday'] = datetime_dim['tpep_dropoff_datetime'].dt.weekday
    # Aad a ID for this dimension
    datetime_dim['datetime_id'] = datetime_dim.index
    datetime_dim = datetime_dim[['datetime_id', 'tpep_pickup_datetime', 'pick_hour', 'pick_day', 'pick_month', 'pick_year', 'pick_weekday',
                                'tpep_dropoff_datetime', 'drop_hour', 'drop_day', 'drop_month', 'drop_year', 'drop_weekday']]
    unique_row =['tpep_dropoff_datetime','tpep_pickup_datetime']
    data = data.merge(datetime_dim,
                    left_on = unique_row,
                    right_on = unique_row,
                    how = 'left')

    #pickup_location_dim
    pickup_location_dim = data.copy()
    pickup_location_dim = data[['pickup_longitude', 'pickup_latitude']]
    pickup_location_dim = pickup_location_dim.drop_duplicates().reset_index(drop=True)
    pickup_location_dim['pickup_location_id'] = pickup_location_dim.index
    pickup_location_dim = pickup_location_dim[['pickup_location_id','pickup_latitude','pickup_longitude']] 
    unique_row =['pickup_longitude','pickup_latitude']
    data = data.merge(pickup_location_dim,
                    left_on = unique_row,
                    right_on = unique_row,
                    how = 'left')
    #drop off dim
    dropoff_location_dim = data.copy()
    dropoff_location_dim = data[['dropoff_longitude', 'dropoff_latitude']]
    dropoff_location_dim = dropoff_location_dim.drop_duplicates().reset_index(drop=True)
    dropoff_location_dim['dropoff_location_id'] = dropoff_location_dim.index
    dropoff_location_dim = dropoff_location_dim[['dropoff_location_id','dropoff_latitude','dropoff_longitude']]
    unique_row =['dropoff_longitude', 'dropoff_latitude']
    data = data.merge(dropoff_location_dim,
                    left_on = unique_row,
                    right_on = unique_row,
                    how = 'left')
    
    #trip_distance_dim
    trip_distance_dim = data.copy()
    trip_distance_dim = data[['trip_distance']]
    trip_distance_dim = trip_distance_dim.drop_duplicates().reset_index(drop=True)
    trip_distance_dim['trip_distance_id'] = trip_distance_dim.index
    trip_distance_dim = trip_distance_dim[['trip_distance_id','trip_distance']]
    unique_row =['trip_distance']
    data = data.merge(trip_distance_dim,
                    left_on = unique_row,
                    right_on = unique_row,
                    how = 'left')

    passenger_count_dim= data.copy()
    passenger_count_dim = data[['passenger_count']]
    passenger_count_dim = passenger_count_dim.drop_duplicates().reset_index(drop=True)
    passenger_count_dim['passenger_count_id'] = passenger_count_dim.index
    passenger_count_dim = passenger_count_dim[['passenger_count_id','passenger_count']]
    unique_row =['passenger_count']
    data = data.merge(passenger_count_dim,
                    left_on = unique_row,
                    right_on = unique_row,
                    how = 'left')

    rate_code_type = {
        1:"Standard rate",
        2:"JFK",
        3:"Newark",
        4:"Nassau or Westchester",
        5:"Negotiated fare",
        6:"Group ride"
    }
    rate_code_dim= data.copy()
    rate_code_dim = data[['RatecodeID']]
    rate_code_dim = rate_code_dim.drop_duplicates().reset_index(drop=True)
    rate_code_dim['rate_code_id'] = rate_code_dim.index
    rate_code_dim['rate_code_name'] = rate_code_dim['RatecodeID'].map(rate_code_type)
    rate_code_dim = rate_code_dim[['rate_code_id','RatecodeID','rate_code_name']]
    unique_row =['RatecodeID']
    data = data.merge(rate_code_dim,
                    left_on = unique_row,
                    right_on = unique_row,
                    how = 'left')



    payment_type_name = {
        1:"Credit card",
        2:"Cash",
        3:"No charge",
        4:"Dispute",
        5:"Unknown",
        6:"Voided trip"
    }
    payment_type_dim=data.copy()
    payment_type_dim = data[['payment_type']]
    payment_type_dim = payment_type_dim.drop_duplicates().reset_index(drop=True)
    payment_type_dim['payment_type_id'] = payment_type_dim.index
    payment_type_dim['payment_type_name'] = payment_type_dim['payment_type'].map(payment_type_name)
    payment_type_dim = payment_type_dim[['payment_type_id','payment_type','payment_type_name']]
    unique_row =['payment_type']
    data = data.merge(payment_type_dim,
                    left_on = unique_row,
                    right_on = unique_row,
                    how = 'left')


    fact_table= data[['VendorID', 'datetime_id', 'passenger_count_id',
       'trip_distance_id', 'rate_code_id', 'store_and_fwd_flag',
       'pickup_location_id', 'dropoff_location_id', 'payment_type_id',
       'fare_amount', 'extra', 'mta_tax', 'tip_amount', 'tolls_amount',
       'improvement_surcharge', 'total_amount']]
    


    return 'success'


@test
def test_output(output, *args) -> None:
    """
    Template code for testing the output of the block.
    """
    assert output is not None, 'The output is undefined'